msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: pgroonga_tuple_is_alive Groonga function\n"
"upper_level: ../\n"
"---"
msgstr ""
"---\n"
"title: pgroonga_tuple_is_alive Groonga関数\n"
"upper_level: ../\n"
"---"

msgid "# `pgroonga_tuple_is_alive` Groonga function"
msgstr "# `pgroonga_tuple_is_alive` Groonga関数"

msgid "Since 1.1.8."
msgstr "1.1.8で追加。"

msgid "## Summary"
msgstr "## 概要"

msgid ""
"`pgroonga_tuple_is_alive` Groonga function returns whether the tuple associate"
"d with the record is alive or not."
msgstr "`pgroonga_tuple_is_alive` Groonga関数は対象レコードに関連づいたタプルが有効かどうかを返します。"

msgid ""
"PostgreSQL keeps invalid tuples such as `DELETE`-ed or `UPDATE`-ed tuples unti"
"l `VACUUM`. PostgreSQL removes invalid tuples when it searches."
msgstr ""
"PostgreSQLは`VACUUM`を実行するまで`DELETE`・`UPDATE`された無効なタプルを消さずに持っています。PostgreSQLは検索時"
"にこれらの無効なタプルを除外しています。"

msgid ""
"The Groonga database used by PGroonga also keeps records associated with inval"
"id tuples until `VACUUM`. It means that `SELECT pgroonga.command('select ' || "
"pgroonga.table_name('INDEX_NAME'))` includes records associated with invalid t"
"uples. Because [`select` Groonga command](http://groonga.org/docs/reference/co"
"mmands/select.html) doesn't know about invalid tuples in PostgreSQL."
msgstr ""
"PGroongaが使っているGroongaのデータベースにも無効なタプルに関連づいたレコードが残っています。これらは`VACUUM`が実行されるまで残ってい"
"ます。残っているということは、`SELECT pgroonga.command('select ' || pgroonga.table_name('INDE"
"X_NAME'))`の結果には無効なタプルに関連づいたレコードが含まれるということです。なぜなら、[Groongaの`select`コマンド](http:/"
"/groonga.org/ja/docs/reference/commands/select.html)はPostgreSQLで無効なタプルかどうか知らない"
"からです。"

msgid ""
"`pgroonga_tuple_is_alive` checks whether the tuple associated with the Groonga"
" record is alive (= not invalid). If you add `pgroonga_tuple_is_alive(ctid)` t"
"o [`--filter` parameter](http://groonga.org/docs/reference/commands/select.htm"
"l#select-filter) value of `select` Groonga command, you can get only alive rec"
"ords even if `VACUUM` isn't executed."
msgstr ""
"`pgroonga_tuple_is_alive`はGroongaのレコードに関連づいたタプルが有効か（無効になっていないか）をチェックします。[`--fi"
"lter`パラメーター](http://groonga.org/ja/docs/reference/commands/select.html#select-"
"filter)の値に`pgroonga_tuple_is_alive(ctid)`を追加すると`VACUUM`を実行していなくても有効なレコードのみ取得でき"
"ます。"

msgid "## Syntax"
msgstr "## 構文"

msgid "Here is the syntax of this Groonga function:"
msgstr "このGroonga関数の構文は次の通りです。"

msgid ""
"```text\n"
"pgroonga_tuple_is_alive(ctid)\n"
"```"
msgstr ""

msgid ""
"`ctid` means the `ctid` column. It's automatically created by PGroonga. You sh"
"ouldn't change it."
msgstr "`ctid`は`ctid`カラムのことです。このカラムはPGroongaが自動的に作成します。これを変更してはいけません。"

msgid "## Usage"
msgstr "## 使い方"

msgid ""
"You need to take care about invalid tuples when you use `select` Groonga comma"
"nd."
msgstr "Groongaの`select`コマンドを使うときは不正なタプルについて注意する必要があります。"

msgid ""
"You may get invalid records when PGroonga index target table processed one or "
"more `DELETE` or `UPDATE` after the last `VACUUM`. There are records that asso"
"ciated with deleted and/or old tuples in Groonga table for the case. If there "
"are deleted or old tuples, `select` Groonga command may return records associa"
"ted with them."
msgstr ""
"最後の`VACUUM`のあと、PGroongaのインデックス対象のテーブルに対して1回以上`DELETE`または`UPDATE`が発生すると不正なレコードが"
"返ることがあります。この状態のとき、Groongaのテーブルには削除されたタプルまたは古いタプルに関連づいたレコードが存在します。Groongaの`sele"
"ct`コマンドはこれらの削除されたタプル・古いタプルに関連づいたレコードを返すことがあります。<"

msgid "The followings show this case by example."
msgstr "このケースを例で説明します。"

msgid "Here are sample schema and data for examples:"
msgstr "例に使うサンプルスキーマとデータは次の通りです。"

msgid ""
"```sql\n"
"CREATE TABLE posts (\n"
"  id integer PRIMARY KEY,\n"
"  title text,\n"
"  content text\n"
");"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_posts_index\n"
"          ON posts\n"
"       USING pgroonga (id, title, content);"
msgstr ""

msgid ""
"INSERT INTO posts VALUES (1, 'PostgreSQL', 'PostgreSQL is a relational databas"
"e management system.');\n"
"INSERT INTO posts VALUES (2, 'Groonga', 'Groonga is a fast full text search en"
"gine that supports all languages.');\n"
"INSERT INTO posts VALUES (3, 'PGroonga', 'PGroonga is a PostgreSQL extension t"
"hat uses Groonga as index.');\n"
"```"
msgstr ""

msgid "Here is the result before updating. There are 3 records:"
msgstr "以下は更新前の結果です。3レコードあります。"

msgid ""
"```sql\n"
"SELECT *\n"
"  FROM json_array_elements(\n"
"         pgroonga.command('select ' ||\n"
"                          pgroonga.table_name('pgroonga_posts_index')\n"
"                         )::json->1->0);\n"
"--                                               value                        "
"                      \n"
"-- ---------------------------------------------------------------------------"
"----------------------\n"
"--  [3]\n"
"--  [[\"_id\",\"UInt32\"],[\"content\",\"LongText\"],[\"ctid\",\"UInt64\"],[\"id\",\"Int32\"],"
"[\"title\",\"LongText\"]]\n"
"--  [1,\"PostgreSQL is a relational database management system.\",1,1,\"PostgreSQ"
"L\"]\n"
"--  [2,\"Groonga is a fast full text search engine that supports all languages."
"\",2,2,\"Groonga\"]\n"
"--  [3,\"PGroonga is a PostgreSQL extension that uses Groonga as index.\",3,3,\"P"
"Groonga\"]\n"
"-- (5 rows)\n"
"```"
msgstr ""

msgid "Update 1 record:"
msgstr "1つのレコードを更新します。"

msgid ""
"```sql\n"
"UPDATE posts\n"
"   SET title = 'Mroonga',\n"
"       content = 'Mroonga is a MySQL storage engine that uses Groonga as backe"
"nd.'\n"
" WHERE id = 3;\n"
"```"
msgstr ""

msgid ""
"Executes `select` Groonga command again. It returns 4 records. 1 record is add"
"ed because there is the record before updating:"
msgstr "Groongaの`select`コマンドを再度実行します。4レコード返ります。1レコード増えています。これは、更新前のレコードが残っているからです。"

msgid ""
"```sql\n"
"SELECT *\n"
"  FROM json_array_elements(\n"
"         pgroonga.command('select ' ||\n"
"                          pgroonga.table_name('pgroonga_posts_index')\n"
"                         )::json->1->0);\n"
"--                                               value                        "
"                      \n"
"-- ---------------------------------------------------------------------------"
"----------------------\n"
"--  [4]\n"
"--  [[\"_id\",\"UInt32\"],[\"content\",\"LongText\"],[\"ctid\",\"UInt64\"],[\"id\",\"Int32\"],"
"[\"title\",\"LongText\"]]\n"
"--  [1,\"PostgreSQL is a relational database management system.\",1,1,\"PostgreSQ"
"L\"]\n"
"--  [2,\"Groonga is a fast full text search engine that supports all languages."
"\",2,2,\"Groonga\"]\n"
"--  [3,\"PGroonga is a PostgreSQL extension that uses Groonga as index.\",3,3,\"P"
"Groonga\"]\n"
"--  [4,\"Mroonga is a MySQL storage engine that uses Groonga as backend.\",4,3,\""
"Mroonga\"]\n"
"-- (6 rows)\n"
"```"
msgstr ""

msgid ""
"You can remove the record associated old tuple by specify `pgroonga_tuple_is_a"
"live(ctid)` as `--filter` parameter value:"
msgstr ""
"`--filter`パラメーターの値に`pgroonga_tuple_is_alive(ctid)`を指定すると古いタプルに関連づいたレコードを取り除けます"
"。"

msgid ""
"```sql\n"
"SELECT *\n"
"  FROM json_array_elements(\n"
"         pgroonga.command('select ' ||\n"
"                          pgroonga.table_name('pgroonga_posts_index') ||\n"
"                          ' --filter \"pgroonga_tuple_is_alive(ctid)\"'\n"
"                         )::json->1->0);\n"
"--                                               value                        "
"                      \n"
"-- ---------------------------------------------------------------------------"
"----------------------\n"
"--  [3]\n"
"--  [[\"_id\",\"UInt32\"],[\"content\",\"LongText\"],[\"ctid\",\"UInt64\"],[\"id\",\"Int32\"],"
"[\"title\",\"LongText\"]]\n"
"--  [1,\"PostgreSQL is a relational database management system.\",1,1,\"PostgreSQ"
"L\"]\n"
"--  [2,\"Groonga is a fast full text search engine that supports all languages."
"\",2,2,\"Groonga\"]\n"
"--  [4,\"Mroonga is a MySQL storage engine that uses Groonga as backend.\",4,3,\""
"Mroonga\"]\n"
"-- (5 rows)\n"
"```"
msgstr ""

msgid "There isn't the record associated with the old tuple."
msgstr "古いタプルに関連づいたレコードはありません。"

msgid "The record associated with the old tuple is deleted when `VACUUM` is executed."
msgstr "古いタプルに関連づいたレコードは`VACUUM`実行時に削除されます。"

msgid ""
"Execute `VACUUM FULL` explicitly. And then execute `select` Groonga command wi"
"thout `pgroonga_tuple_is_alive(ctid)` again. It returns 3 records. There isn't"
" the record associated with the old record:"
msgstr ""
"明示的に`VACUUM FULL`を実行します。その後、`pgroonga_tuple_is_alive(ctid)`なしでGroongaの`select`"
"コマンドを再度実行します。3レコード返ってきます。ここには古いタプルに関連づいたレコードはありません。"

msgid ""
"```sql\n"
"VACUUM FULL;\n"
"SELECT *\n"
"  FROM json_array_elements(\n"
"         pgroonga.command('select ' ||\n"
"                          pgroonga.table_name('pgroonga_posts_index')\n"
"                         )::json->1->0);\n"
"--                                               value                        "
"                      \n"
"-- ---------------------------------------------------------------------------"
"----------------------\n"
"--  [3]\n"
"--  [[\"_id\",\"UInt32\"],[\"content\",\"LongText\"],[\"ctid\",\"UInt64\"],[\"id\",\"Int32\"],"
"[\"title\",\"LongText\"]]\n"
"--  [1,\"PostgreSQL is a relational database management system.\",1,1,\"PostgreSQ"
"L\"]\n"
"--  [2,\"Groonga is a fast full text search engine that supports all languages."
"\",2,2,\"Groonga\"]\n"
"--  [3,\"Mroonga is a MySQL storage engine that uses Groonga as backend.\",3,3,\""
"Mroonga\"]\n"
"-- (5 rows)\n"
"```"
msgstr ""

msgid "## See also"
msgstr "## 参考"

msgid "  * [`pgroonga.command` function](../functions/pgroonga-command.html)"
msgstr "  * [`pgroonga.command`関数](../functions/pgroonga-command.html)"
