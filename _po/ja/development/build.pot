# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-24 12:18+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../development/build.md:1
msgid "---\n"
"title: Build\n"
"---"
msgstr ""

#: ../../../development/build.md:5
msgid "# Build"
msgstr ""

#: ../../../development/build.md:7
msgid "It's recommended that you build both PostgreSQL and PGroonga with debug options."
msgstr ""

#: ../../../development/build.md:9
msgid "It's better that you [build Groonga][groonga-build] with debug options (Groonga's `configure` provides `--enable-debug` option) too. If you use [packaged Groonga][groonga-install], you need to install development package. It's `libgroonga-dev` for Debian family distribution and `groonga-devel` for Red Hat family distribution."
msgstr ""

#: ../../../development/build.md:11
msgid "You need to install `token_fitlers/stem` Groonga plugin to run all tests. You can install it by `groonga-token-filter-stem` package."
msgstr ""

#: ../../../development/build.md:13
msgid "## How to build PostgreSQL"
msgstr ""

#: ../../../development/build.md:15
msgid "Download source from [the PostgreSQL site][postgresql-source-download]. Here are command lines to download the source of PostgreSQL {{ site.development_postgresql_version }} and extract it:"
msgstr ""

#: ../../../development/build.md:17
msgid "```console\n"
"% wget https://ftp.postgresql.org/pub/source/v{{ site.development_postgresql_version }}/postgresql-{{ site.development_postgresql_version }}.tar.bz2\n"
"% tar xf postgresql-{{ site.development_postgresql_version }}.tar.bz2\n"
"% cd postgresql-{{ site.development_postgresql_version }}\n"
"```"
msgstr ""

#: ../../../development/build.md:23
msgid "Run `configure` with `CFLAGS=\"-O0 -g3\"` argument. It enables debug build. `--prefix=/tmp/local` is optional:"
msgstr ""

#: ../../../development/build.md:25
msgid "```console\n"
"% ./configure CFLAGS=\"-O0 -g3\" --prefix=/tmp/local\n"
"```"
msgstr ""

#: ../../../development/build.md:29
msgid "Build and install PostgreSQL:"
msgstr ""

#: ../../../development/build.md:31
msgid "```console\n"
"% make -j$(nproc) > /dev/null\n"
"% make install > /dev/null\n"
"```"
msgstr ""

#: ../../../development/build.md:36
msgid "Initialize and run PostgreSQL:"
msgstr ""

#: ../../../development/build.md:38
msgid "```console\n"
"% mkdir -p /tmp/local/var/lib\n"
"% /tmp/local/bin/initdb --locale C --encoding UTF-8 -D /tmp/local/var/lib/postgresql\n"
"% /tmp/local/bin/postgres -D /tmp/local/var/lib/postgresql\n"
"```"
msgstr ""

#: ../../../development/build.md:44
msgid "The following one liner is useful to reset all PostgreSQL related data. You store the one liner in your shell history, you can rerun the one linear quickly:"
msgstr ""

#: ../../../development/build.md:46
msgid "```console\n"
"% rm -rf /tmp/local/var/lib/postgresql && \\\n"
"    mkdir -p /tmp/local/var/lib/postgresql &&\n"
"    /tmp/local/bin/initdb \\\n"
"      --locale C \\\n"
"      --encoding UTF-8 \\\n"
"      -D /tmp/local/var/lib/postgresql && \\\n"
"   /tmp/local/bin/postgres -D /tmp/local/var/lib/postgresql\n"
"```"
msgstr ""

#: ../../../development/build.md:56
msgid "## How to build and test PGroonga"
msgstr ""

#: ../../../development/build.md:58
msgid "It's recommended that you use the latest PGroonga instead of released PGroonga. Here are command lines to clone the latest PGroonga source:"
msgstr ""

#: ../../../development/build.md:60
msgid "```console\n"
"% git clone --recursive git@github.com:pgroonga/pgroonga.git\n"
"% cd pgroonga\n"
"```"
msgstr ""

#: ../../../development/build.md:65
msgid "PGroonga has two test types:"
msgstr ""

#: ../../../development/build.md:67
msgid "  * SQL based regression tests"
msgstr ""

#: ../../../development/build.md:69
msgid "  * Ruby and SQL based [`pgroonga_check`][pgroonga-check] tests"
msgstr ""

#: ../../../development/build.md:71
msgid "Normally, you only use the former. `test/run-sql-test.sh` is the test runner for the former. It builds and installs PGroonga and runs SQL based regression tests. `PATH=/tmp/local/bin:$PATH` is needed because PostgreSQL is built with `--prefix=/tmp/local`. `pg_config` exists in `/tmp/local/bin`:"
msgstr ""

#: ../../../development/build.md:73
msgid "```console\n"
"% PATH=/tmp/local/bin:$PATH test/run-sql-test.sh\n"
"```"
msgstr ""

#: ../../../development/build.md:77
msgid "See also [test](test.html)."
msgstr ""

#: ../../../development/build.md:79
msgid "[postgresql-source-download]:https://www.postgresql.org/ftp/source/"
msgstr ""

#: ../../../development/build.md:81
msgid "[groonga-build]:https://groonga.org/docs/install/others.html"
msgstr ""

#: ../../../development/build.md:83
msgid "[groonga-install]:https://groonga.org/docs/install.html"
msgstr ""

#: ../../../development/build.md:85
msgid "[pgroonga-check]:../reference/modules/pgroonga-check.html"
msgstr ""

