msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid ""
"---\n"
"title: \"@@ operator for jsonb type\"\n"
"upper_level: ../\n"
"---"
msgstr ""

msgid "# `@@` operator for `jsonb` type"
msgstr ""

msgid "## Summary"
msgstr ""

msgid "This operator is deprecated since 1.2.1. Use [`` &` `` operator][script-jsonb-v2] instead."
msgstr ""

msgid "`@@` operator is a PGroonga original operator. You can use complex condition that can't be written by [`@>` operator][contain-jsonb] such as range search."
msgstr ""

msgid "If you know [JsQuery][jsquery], you can understand like \"PGroonga provides `jsonb` type related search features that are similar to JsQuery with different syntax\"."
msgstr ""

msgid "## Syntax"
msgstr ""

msgid "Here is the syntax of this operator:"
msgstr ""

msgid ""
"```sql\n"
"jsonb_column @@ condition\n"
"```"
msgstr ""

msgid "`jsonb_column` is a column that its type is `jsonb`."
msgstr ""

msgid "`condition` is a `text` value used as query. It uses [Groonga's script syntax][groogna-script-syntax]."
msgstr ""

msgid "The operator returns `true` when `condition` matches `jsonb_column` value, `false` otherwise."
msgstr ""

msgid "## Operator classes"
msgstr ""

msgid "You need to specify one of the following operator classes to use this operator:"
msgstr ""

msgid "  * `pgroonga_jsonb_ops_v2`: Default for `jsonb`"
msgstr ""

msgid "  * `pgroonga_jsonb_ops`: For `jsonb`"
msgstr ""

msgid "## Usage"
msgstr ""

msgid "Here are sample schema and data for examples:"
msgstr ""

msgid ""
"```sql\n"
"CREATE TABLE logs (\n"
"  record jsonb\n"
");"
msgstr ""

msgid "CREATE INDEX pgroonga_logs_index ON logs USING pgroonga (record);"
msgstr ""

msgid ""
"INSERT INTO logs\n"
"     VALUES ('{\n"
"                \"message\": \"Server is started.\",\n"
"                \"host\":    \"www.example.com\",\n"
"                \"tags\": [\n"
"                  \"web\",\n"
"                  \"example.com\"\n"
"                ]\n"
"              }');\n"
"INSERT INTO logs\n"
"     VALUES ('{\n"
"                \"message\": \"GET /\",\n"
"                \"host\":    \"www.example.com\",\n"
"                \"code\":    200,\n"
"                \"tags\": [\n"
"                  \"web\",\n"
"                  \"example.com\"\n"
"                ]\n"
"              }');\n"
"INSERT INTO logs\n"
"     VALUES ('{\n"
"                \"message\": \"Send to <info@example.com>.\",\n"
"                \"host\":    \"mail.example.net\",\n"
"                \"tags\": [\n"
"                  \"mail\",\n"
"                  \"example.net\"\n"
"                ]\n"
"              }');\n"
"```"
msgstr ""

msgid "Disable sequential scan:"
msgstr ""

msgid ""
"```sql\n"
"SET enable_seqscan = off;\n"
"```"
msgstr ""

msgid "You need to understand how PGroonga creates index against `jsonb` type value to create search condition."
msgstr ""

msgid "PGroonga splits a `jsonb` type value into values and then creates indexes against these values. In SQL, think about the following schema:"
msgstr ""

msgid ""
"```sql\n"
"CREATE TABLE values (\n"
"  key text PRIMARY KEY,\n"
"  path text,\n"
"  paths text[],\n"
"  type text,\n"
"  boolean boolean,\n"
"  number double precision,\n"
"  string text,\n"
"  size numeric\n"
");\n"
"```"
msgstr ""

msgid "Here are descriptions of column:"
msgstr ""

msgid "  * `key`: The ID of the value. If value has the same path and content, `key` is the same value. Key format is `'${PATH}|${TYPE}|${VALUE}'`. It's not used in search condition."
msgstr ""

msgid "  * `path`: The path of the value from root. It uses [jq][jq] compatible format. Object is `[\"${ELEMENT_NAME}\"]`, array is `[]`. For example, the path of `\"web\"` in `{\"tags\": [\"web\"]}` is `.[\"tags\"][]`. If you know absolute path of the value, you can use this value in search condition."
msgstr ""

msgid "  * `paths`: The paths of the value. It includes absolute path, sub paths, `.${ELEMENT_NAME1}.${ELEMENT_NAME2}` format paths and paths without array. This column is convenient for search condition because you can use one of them for search condition. Here are paths for `\"x\"` in `{\"a\": {\"b\": \"c\": [\"x\"]}}`:"
msgstr ""

msgid ""
"     * `.a.b.c`\n"
"     * `.[\"a\"][\"b\"][\"c\"]`\n"
"     * `.[\"a\"][\"b\"][\"c\"][]`\n"
"     * `a.b.c`\n"
"     * `[\"a\"][\"b\"][\"c\"]`\n"
"     * `[\"a\"][\"b\"][\"c\"][]`\n"
"     * `b.c`\n"
"     * `[\"b\"][\"c\"]`\n"
"     * `[\"b\"][\"c\"][]`\n"
"     * `c`\n"
"     * `[\"c\"]`\n"
"     * `[\"c\"][]`\n"
"     * `[]`"
msgstr ""

msgid "  * `type`: The type of the value. This column value is one of them:"
msgstr ""

msgid "    * `\"object\"`: Object. No value."
msgstr ""

msgid "    * `\"array\"`: Array. The number of elements is stored in `size` column."
msgstr ""

msgid "    * `\"boolean\"`: Boolean. The value is stored in `boolean` column."
msgstr ""

msgid "    * `\"number\"`: Number. The value is stored in `number` column."
msgstr ""

msgid "    * `\"string\"`: String. The value is stored in `string` column."
msgstr ""

msgid "  * `boolean`: The value if `type` column value is `\"boolean\"`, `false` otherwise."
msgstr ""

msgid "  * `number`: The value if `type` column value is `\"number\"`, `0` otherwise."
msgstr ""

msgid "  * `string`: The value if `type` column value is `\"string\"`, `\"\"` otherwise."
msgstr ""

msgid "  * `size`: The number of elements if `type` column value is `\"array\"`, `0` otherwise."
msgstr ""

msgid "Here is a sample JSON:"
msgstr ""

msgid ""
"```json\n"
"{\n"
"  \"message\": \"GET /\",\n"
"  \"host\":    \"www.example.com\",\n"
"  \"code\":    200,\n"
"  \"tags\": [\n"
"    \"web\",\n"
"    \"example.com\"\n"
"  ]\n"
"}\n"
"```"
msgstr ""

msgid "The JSON is split to the following values. (They are part of all split values.)"
msgstr ""

msgid ""
"| key | path | paths | type | boolean | number | string | size |\n"
"| --- | ---- | ----- | ---- | ------- | ------ | ------ | ---- |\n"
"| `.|object` | `.` | `[.]` | `object` | | | | |\n"
"| `.[\"message\"]|string|GET /` | `.[\"message\"]` | `[.message, .[\"message\"], message, [\"message\"]]` | `string` | | | `GET /` | |\n"
"| `.[\"tags\"][]|string|web` | `.[\"tags\"]` | `[.tags, .[\"tags\"], .[\"tags\"][], tags, [\"tags\"], [\"tags\"][], []]` | `string` | | | `web` | |"
msgstr ""

msgid "You specify condition that matches split value to `@@` operator. If there is one or more split values that match specified condition in `jsonb` type value, the `jsonb` type value is matched."
msgstr ""

msgid "Here is a condition that searches `jsonb` type value that has `www.example.com` string:"
msgstr ""

msgid "(It uses [`jsonb_pretty()` function][postgresql-jsonb-pretty] provided since PostgreSQL 9.5 for readability.)"
msgstr ""

msgid ""
"```sql\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record @@ 'string == \"www.example.com\"';\n"
"--             jsonb_pretty             \n"
"-- -------------------------------------\n"
"--  {                                  +\n"
"--      \"host\": \"www.example.com\",     +\n"
"--      \"tags\": [                      +\n"
"--          \"web\",                     +\n"
"--          \"example.com\"              +\n"
"--      ],                             +\n"
"--      \"message\": \"Server is started.\"+\n"
"--  }\n"
"--  {                                  +\n"
"--      \"code\": 200,                   +\n"
"--      \"host\": \"www.example.com\",     +\n"
"--      \"tags\": [                      +\n"
"--          \"web\",                     +\n"
"--          \"example.com\"              +\n"
"--      ],                             +\n"
"--      \"message\": \"GET /\"             +\n"
"--  }\n"
"-- (2 rows)\n"
"```"
msgstr ""

msgid "Here is a condition that searches `jsonb` type value that has number between `200` to `299` as `code` column value. The condition uses `paths @ \"...\"` syntax to use simple path format (`.code`) to specify path."
msgstr ""

msgid ""
"```sql\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record @@ 'paths @ \".code\" && number >= 200 && number < 300';\n"
"--           jsonb_pretty          \n"
"-- --------------------------------\n"
"--  {                             +\n"
"--      \"code\": 200,              +\n"
"--      \"host\": \"www.example.com\",+\n"
"--      \"tags\": [                 +\n"
"--          \"web\",                +\n"
"--          \"example.com\"         +\n"
"--      ],                        +\n"
"--      \"message\": \"GET /\"        +\n"
"--  }\n"
"-- (1 row)\n"
"```"
msgstr ""

msgid "Here is a condition for full text search from all text values in `jsonb` value type:"
msgstr ""

msgid ""
"```sql\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record @@ 'string @ \"started\"';\n"
"--             jsonb_pretty             \n"
"-- -------------------------------------\n"
"--  {                                  +\n"
"--      \"host\": \"www.example.com\",     +\n"
"--      \"tags\": [                      +\n"
"--          \"web\",                     +\n"
"--          \"example.com\"              +\n"
"--      ],                             +\n"
"--      \"message\": \"Server is started.\"+\n"
"--  }\n"
"-- (1 row)\n"
"```"
msgstr ""

msgid "You can use [Groonga's query syntax][groonga-query-syntax] (`a OR b` can be used) for full text search by `query(\"string\", \"...\")` syntax:"
msgstr ""

msgid ""
"```sql\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record @@ 'query(\"string\", \"send OR server\")';\n"
"--                  jsonb_pretty                 \n"
"-- ----------------------------------------------\n"
"--  {                                           +\n"
"--      \"host\": \"www.example.com\",              +\n"
"--      \"tags\": [                               +\n"
"--          \"web\",                              +\n"
"--          \"example.com\"                       +\n"
"--      ],                                      +\n"
"--      \"message\": \"Server is started.\"         +\n"
"--  }\n"
"--  {                                           +\n"
"--      \"host\": \"mail.example.net\",             +\n"
"--      \"tags\": [                               +\n"
"--          \"mail\",                             +\n"
"--          \"example.net\"                       +\n"
"--      ],                                      +\n"
"--      \"message\": \"Send to <info@example.com>.\"+\n"
"--  }\n"
"-- (2 rows)\n"
"```"
msgstr ""

msgid "## See also"
msgstr ""

msgid "  * [`jsonb` support][jsonb]"
msgstr ""

msgid "  * [`@>` operator][contain-jsonb]: Search by a `jsonb` data"
msgstr ""

msgid "  * [`` &` `` operator][script-jsonb-v2]: Advanced search by ECMAScript like query language"
msgstr ""

msgid "[jsonb]:../jsonb.html"
msgstr ""

msgid ""
"[contain-jsonb]:contain-jsonb.html\n"
"[script-jsonb-v2]:script-jsonb-v2.html\n"
"[jsquery]:https://github.com/postgrespro/jsquery"
msgstr ""

msgid "[jq]:https://stedolan.github.io/jq/"
msgstr ""

msgid "[groonga-query-syntax]:http://groonga.org/docs/reference/grn_expr/query_syntax.html"
msgstr ""

msgid "[groonga-script-syntax]:http://groonga.org/docs/reference/grn_expr/script_syntax.html"
msgstr ""

msgid "[postgresql-jsonb-pretty]:{{ site.postgresql_doc_base_url.en }}/functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE"
msgstr ""
