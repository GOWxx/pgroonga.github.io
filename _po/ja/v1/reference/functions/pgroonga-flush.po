msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"PO-Revision-Date: 2023-08-13 09:46+0900\n"

msgid ""
"---\n"
"title: pgroonga.flush function\n"
"upper_level: ../\n"
"---"
msgstr ""
"---\n"
"title: pgroonga.flush関数\n"
"upper_level: ../\n"
"---"

msgid "# `pgroonga.flush` function"
msgstr "# `pgroonga.flush`関数"

msgid "## Summary"
msgstr "## 概要"

msgid ""
"`pgroonga.flush` function ensuring writing changes only in memory into disk. N"
"ormally, you don't need to this function because it's done automatically. But "
"you may need to use this function when you want to prevent breaking PGroonga i"
"ndexes on crash or force shutdown."
msgstr ""
"`pgroonga.flush`関数はメモリー上にだけある変更を確実にディスクに書き込みます。この処理は自動的に行われるので、通常、この関数を使う必要はあり"
"ません。しかし、クラッシュ・強制終了によるPGroongaインデックスの破損を防ぎたい場合はこの関数を使う必要があるかもしれません。"

msgid ""
"Normally, users shouldn't shut down server forcibly but some users do in some "
"cases. For example, Windows update may restart Windows server unexpectedly."
msgstr ""
"通常、ユーザーはサーバーを強制終了してはいけません。しかし、いくつか強制終了してしまうケースがあります。たとえば、Windowsアップデートにより意図せずに"
"Windowsサーバーが再起動することがあるかもしれません。"

msgid ""
"If PostgreSQL with PGroonga is shut down forcibly, changes only in memory may "
"be lost. If you call `pgroonga.flush` function before force shutdown, there ar"
"e no changes only in memory. It means that PGroonga indexes aren't broken even"
" if users shut down PostgreSQL with PGroonga forcibly."
msgstr ""
"もし、PGroongaを使っているPostgreSQLが強制終了したらメモリー上にだけある変更が失われるかもしれません。強制終了の前に`pgroonga.f"
"lush`関数を呼べばメモリー上にだけある変更がなくなります。つまり、ユーザーがPGroongaを使っているPostgreSQLを強制終了してもPGroon"
"gaのインデックスは壊れないということです。"

msgid ""
"If there are many changes only in memory, `pgroonga.flush` may take a long tim"
"e. It's depend on write performance of your disk."
msgstr ""
"もし、メモリー上にだけある変更が多い場合、`pgroonga.flush`の実行時間が長くなるかもしれません。これは使用しているディスクの書き込み性能に依存"
"します。"

msgid "## Syntax"
msgstr "## 構文"

msgid "Here is the syntax of this function:"
msgstr "この関数の構文は次の通りです。"

msgid ""
"```text\n"
"bool pgroonga.flush(pgroonga_index_name)\n"
"```"
msgstr ""

msgid ""
"`pgroonga_index_name` is a `text` type value. It's an index name to be flushed"
". The index should be created with `USING pgroonga`."
msgstr ""
"`pgroonga_index_name`は`text`型の値です。フラッシュ対象のインデックス名です。このインデックスは`USING pgroonga`付"
"きで作成してある必要があります。"

msgid ""
"`pgroonga.flush` returns always `true`. Because if `pgroonga.flush` is failed,"
" it raises an error instead of returning result."
msgstr ""
"`pgroonga.flush`は常に`true`を返します。なぜなら、もし`pgroonga.flush`が失敗したら値を返すのではなくエラーになるからで"
"す。"

msgid "## Usage"
msgstr "## 使い方"

msgid ""
"Here are sample schema and data. In the schema, both search target data and ou"
"tput data are index target columns:"
msgstr "以下はサンプルのスキーマとデータです。このスキーマでは、検索対象のデータと出力対象のデータはどちらもインデックス対象のカラムです。"

msgid ""
"```sql\n"
"CREATE TABLE terms (\n"
"  id integer,\n"
"  title text,\n"
"  content text\n"
");"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_terms_index\n"
"          ON terms\n"
"       USING pgroonga (title, content);\n"
"```"
msgstr ""

msgid ""
"You can flush `pgroonga_terms_index` related changes only in memory by the fol"
"lowing `pgroonga.flush` call:"
msgstr ""
"以下のように`pgroonga.flush`を呼び出すことでメモリー上にだけある`pgroonga_terms_index`関連の変更をディスクに書き出すこ"
"とができます。"

msgid ""
"```sql\n"
"SELECT pgroonga.flush('pgroonga_terms_index');\n"
"--  flush \n"
"-- -------\n"
"--  t\n"
"-- (1 row)\n"
"```"
msgstr ""

msgid "If you specify nonexistent index name, `pgroonga.flush` raises an error:"
msgstr "存在しないインデックス名を指定すると`pgroonga.flush`はエラーになります。"

msgid ""
"```sql\n"
"SELECT pgroonga.flush('nonexistent');\n"
"-- ERROR:  relation \"nonexistent\" does not exist\n"
"```"
msgstr ""
