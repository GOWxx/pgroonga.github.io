msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid ""
"---\n"
"title: \"&= operator\"\n"
"upper_level: ../\n"
"---"
msgstr ""

msgid "# `&=` operator"
msgstr ""

msgid "Since 2.4.6."
msgstr ""

msgid "## Summary"
msgstr ""

msgid "`&=` operator performs exact match search."
msgstr ""

msgid "## Syntax"
msgstr ""

msgid ""
"```sql\n"
"column &= keyword\n"
"column &= (keyword, NULL, index_name)::pgroonga_full_text_search_condition\n"
"```"
msgstr ""

msgid "The first syntax does not use normally."
msgstr ""

msgid "The second syntax is for using custom normalizer even if PGroonga's index is used or not."
msgstr ""

msgid "Here is the description of the first signature."
msgstr ""

msgid ""
"```sql\n"
"column &= keyword\n"
"```"
msgstr ""

msgid "`column` is a column to be searched. It's `text` type or `varchar` type."
msgstr ""

msgid "`keyword` is a keyword for exact match search . It's `text` type."
msgstr ""

msgid "The operator returns `true` when the `column` exact match with `keyword`."
msgstr ""

msgid "Here is the description of the second signature."
msgstr ""

msgid ""
"```sql\n"
"column &= (keyword, NULL, index_name)::pgroonga_full_text_search_condition\n"
"```"
msgstr ""

msgid "The second argument is set only NULL. Because this syntax is not for optimizing search score."
msgstr ""

msgid "`index_name` is an index name of the corresponding PGroonga index. It's `text` type."
msgstr ""

msgid "It's for using the same search options specified in PGroonga index in sequential search."
msgstr ""

msgid "## Operator classes"
msgstr ""

msgid "We need to specify one of the following operator classes to use this operator:"
msgstr ""

msgid "  * `pgroonga_text_term_search_ops_v2`: For `text`"
msgstr ""

msgid "  * `pgroonga_varchar_term_search_ops_v2`: For `varchar`"
msgstr ""

msgid "## Usage"
msgstr ""

msgid "If PostgreSQL use PGroonga's index as below, `&=` operator can use custom normalizer."
msgstr ""

msgid "Therefore, PostgreSQL returns 2 records(Groonga and groonga) by the search keyword like `gr-oonga` in the following example."
msgstr ""

msgid ""
"```sql\n"
"CREATE TABLE tags (\n"
"  id int,\n"
"  name text\n"
");"
msgstr ""

msgid ""
"CREATE INDEX pgrn_index ON tags\n"
"  USING pgroonga (name pgroonga_text_term_search_ops_v2)\n"
"  WITH (normalizers='NormalizerNFKC150(\"remove_symbol\", true)');"
msgstr ""

msgid ""
"INSERT INTO tags VALUES (1, 'PostgreSQL');\n"
"INSERT INTO tags VALUES (2, 'Groonga');\n"
"INSERT INTO tags VALUES (3, 'groonga');\n"
"INSERT INTO tags VALUES (4, 'PGroonga');"
msgstr ""

msgid ""
"EXPLAIN (COSTS OFF)\n"
"SELECT name\n"
"  FROM tags\n"
" WHERE name &= 'gr-oonga';\n"
"QUERY PLAN\n"
"Bitmap Heap Scan on tags\n"
"   Recheck Cond: (name &= 'gr-oonga'::text)\n"
"   ->  Bitmap Index Scan on pgrn_index\n"
"         Index Cond: (name &= 'gr-oonga'::text)\n"
"(4 rows)"
msgstr ""

msgid ""
"SELECT name\n"
"  FROM tags\n"
" WHERE name &= 'gr-oonga';\n"
"--    name    \n"
"-- -----------\n"
"--  PGroonga\n"
"--  pglogical\n"
"-- (2 rows)\n"
"```"
msgstr ""

msgid "However, if PostgreSQL does not use PGroonga's index, `&=` operator can not use custom normalizer."
msgstr ""

msgid "Therefore, PostgreSQL returns no record by the search keyword like `gr-oonga` in the following example."
msgstr ""

msgid ""
"SET enable_seqscan = on;\n"
"SET enable_indexscan = off;\n"
"SET enable_bitmapscan = off;"
msgstr ""

msgid ""
"EXPLAIN (COSTS OFF)\n"
"SELECT name\n"
"  FROM tags\n"
" WHERE name &= 'gr-oonga';\n"
"QUERY PLAN\n"
"Seq Scan on tags\n"
"  Filter: (name &= 'gr-oonga'::text)\n"
"(2 rows)"
msgstr ""

msgid ""
"SELECT name\n"
"  FROM tags\n"
" WHERE name &= 'gr-oonga';\n"
" name \n"
"------\n"
"(0 rows)\n"
"```"
msgstr ""

msgid "On the other hand, if we use the second syntax, we can exact match search with custom normalizer even if PGroonga's index is not used."
msgstr ""

msgid ""
"CREATE INDEX pgrn_index ON tags\n"
"  USING pgroonga (name pgroonga_text_term_search_ops_v2);"
msgstr ""

msgid ""
"EXPLAIN (COSTS OFF)\n"
"SELECT name\n"
"  FROM tags\n"
" WHERE name &= ('groonga', NULL, 'pgrn_index')::pgroonga_full_text_search_condition\n"
" ORDER BY id;\n"
"QUERY PLAN\n"
"Sort\n"
"  Sort Key: id\n"
"  ->  Seq Scan on tags\n"
"        Filter: (name &= '(groonga,,pgrn_index)'::pgroonga_full_text_search_condition)\n"
"(4 rows)"
msgstr ""

msgid ""
"SELECT name\n"
"  FROM tags\n"
" WHERE name &= ('groonga', NULL, 'pgrn_index')::pgroonga_full_text_search_condition\n"
" ORDER BY id;\n"
"  name   \n"
"---------\n"
" Groonga\n"
" groonga\n"
"(2 rows)\n"
"```"
msgstr ""
