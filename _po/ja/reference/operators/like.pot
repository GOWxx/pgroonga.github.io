msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid ""
"---\n"
"title: LIKE operator\n"
"upper_level: ../\n"
"---"
msgstr ""

msgid "# `LIKE` operator"
msgstr ""

msgid "## Summary"
msgstr ""

msgid "PGroonga converts `column LIKE '%KEYWORD%'` condition to `column %% 'KEYWORD'` internally. [`%%` operator](match.html) performs full text search with index. It's faster than `LIKE` operator without index."
msgstr ""

msgid "`column LIKE '%KEYWORD%'` with index is slower than `column %% 'KEYWORD'` with index because `column LIKE '%KEYWORD%'` with index needs \"[Recheck]({{ site.postgresql_doc_base_url.en }}/index-scanning.html)\". `column %% 'KEYWORD'` doesn't need \"Recheck\"."
msgstr ""

msgid "The original `LIKE` operator searches against text as is. But `%%` operator performs full text search against normalized text. It means that search result of `LIKE` operator with index needs \"Recheck\"."
msgstr ""

msgid "However, If the column type is `varchar`, `LIKE` or `ILIKE` are always sequential search. Because PGroonga can't use index against `varchar`."
msgstr ""

msgid "## Operator classes"
msgstr ""

msgid "You need to specify one of the following operator classes to use this operator:"
msgstr ""

msgid "  * `pgroonga_text_full_text_search_ops_v2`: Default for `text`"
msgstr ""

msgid "  * `pgroonga_text_regexp_ops_v2`: For `text`"
msgstr ""

msgid "  * `pgroonga_text_full_text_search_ops`: For `text`"
msgstr ""

msgid "  * `pgroonga_text_regexp_ops`: For `text`"
msgstr ""

msgid "## Syntax"
msgstr ""

msgid "Here is the syntax of this operator:"
msgstr ""

msgid ""
"```sql\n"
"column LIKE pattern\n"
"```"
msgstr ""

msgid "`column` is a column to be searched."
msgstr ""

msgid "`pattern` is a search pattern. It's `text` type."
msgstr ""

msgid "## Usage"
msgstr ""

msgid "Here are sample schema and data for examples:"
msgstr ""

msgid ""
"```sql\n"
"CREATE TABLE memos (\n"
"  id integer,\n"
"  content text\n"
");"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_content_index ON memos USING pgroonga (content);\n"
"```"
msgstr ""

msgid ""
"```sql\n"
"INSERT INTO memos VALUES (1, 'PostgreSQL is a relational database management system.');\n"
"INSERT INTO memos VALUES (2, 'Groonga is a fast full text search engine that supports all languages.');\n"
"INSERT INTO memos VALUES (3, 'PGroonga is a PostgreSQL extension that uses Groonga as index.');\n"
"INSERT INTO memos VALUES (4, 'There is groonga command.');\n"
"```"
msgstr ""

msgid "You can perform `LIKE` operator with index:"
msgstr ""

msgid ""
"```sql\n"
"SET enable_seqscan = off;\n"
"SET enable_indexscan = on;\n"
"SET enable_bitmapscan = on;"
msgstr ""

msgid ""
"SELECT * FROM memos WHERE content LIKE '%groonga%';\n"
"--  id |          content          \n"
"-- ----+---------------------------\n"
"--   4 | There is groonga command.\n"
"-- (1 row)\n"
"```"
msgstr ""

msgid "The default operator class of PGroonga index for `text` type can't find any records with partial alphabet keyword. For example, you can't find record with `roonga` keyword:"
msgstr ""

msgid ""
"SELECT * FROM memos WHERE content LIKE '%roonga%';\n"
"--  id | content \n"
"-- ----+---------\n"
"-- (0 rows)\n"
"```"
msgstr ""

msgid "But you can find some records with `roonga` keyword without index:"
msgstr ""

msgid ""
"```sql\n"
"SET enable_seqscan = on;\n"
"SET enable_indexscan = off;\n"
"SET enable_bitmapscan = off;"
msgstr ""

msgid ""
"SELECT * FROM memos WHERE content LIKE '%roonga%';\n"
"--  id |                                content                                 \n"
"-- ----+------------------------------------------------------------------------\n"
"--   2 | Groonga is a fast full text search engine that supports all languages.\n"
"--   3 | PGroonga is a PostgreSQL extension that uses Groonga as index.\n"
"--   4 | There is groonga command.\n"
"-- (3 rows)\n"
"```"
msgstr ""

msgid "You can find records by prefix alphabet keyword such as `Gro`:"
msgstr ""

msgid ""
"SELECT * FROM memos WHERE content LIKE '%Gro%';\n"
"--  id |                                content                                 \n"
"-- ----+------------------------------------------------------------------------\n"
"--   2 | Groonga is a fast full text search engine that supports all languages.\n"
"--   3 | PGroonga is a PostgreSQL extension that uses Groonga as index.\n"
"-- (2 rows)\n"
"```"
msgstr ""

msgid "If you want to search by partial alphabet keyword, there are two approaches."
msgstr ""

msgid "The first approach is using the `TokenBigramSplitSymbolAlphaDigit` tokenizer:"
msgstr ""

msgid ""
"```sql\n"
"DROP INDEX IF EXISTS pgroonga_content_index;"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_content_index\n"
"          ON memos\n"
"       USING pgroonga (content)\n"
"        WITH (tokenizer='TokenBigramSplitSymbolAlphaDigit');\n"
"```"
msgstr ""

msgid "You can find records by `roonga`:"
msgstr ""

msgid "See [Customization in `CREATE INDEX USING pgroonga`](../create-index-using-pgroonga.html#customization) for tokenizer."
msgstr ""

msgid "The second approach is using `pgroonga_text_regexp_ops_v2` operator class:"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_content_index\n"
"          ON memos\n"
"       USING pgroonga (content pgroonga_text_regexp_ops_v2);\n"
"```"
msgstr ""

msgid "You can find records by `rooonga`:"
msgstr ""

msgid "## See also"
msgstr ""

msgid "  * [`CREATE INDEX USING pgroonga`](../create-index-using-pgroonga.html)"
msgstr ""
