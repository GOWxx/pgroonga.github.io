# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-24 12:18+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../../v1/tutorial/index.md:1
msgid "---\n"
"title: Tutorial\n"
"---"
msgstr ""

#: ../../../../v1/tutorial/index.md:5
msgid "# Tutorial"
msgstr ""

#: ../../../../v1/tutorial/index.md:7
msgid "This document describes how to use PGroonga step by step. If you don't install PGroonga yet, [install][install] PGroonga before you read this document."
msgstr ""

#: ../../../../v1/tutorial/index.md:9
msgid "You can use PGroonga as fast full text search index. You can also use PGroonga as more general index for equality condition (`=`) and comparison conditions (`<`, `>=` and so on)."
msgstr ""

#: ../../../../v1/tutorial/index.md:11
msgid "PostgreSQL provides GiST and GIN as bundled indexes. You can use PGroonga as alternative of GiST and GIN. See [PGroonga versus GiST and GIN](../reference/pgroonga-versus-gist-and-gin.html) for differences of them."
msgstr ""

#: ../../../../v1/tutorial/index.md:13
msgid "This document describes about the followings:"
msgstr ""

#: ../../../../v1/tutorial/index.md:15
msgid "  * How to use PGroonga as index for full text search"
msgstr ""

#: ../../../../v1/tutorial/index.md:17
msgid "  * How to use PGroonga as index for regular expression"
msgstr ""

#: ../../../../v1/tutorial/index.md:19
msgid "  * How to use PGroonga as index for similar search"
msgstr ""

#: ../../../../v1/tutorial/index.md:21
msgid "  * How to use PGroonga as index for equality condition and comparison conditions"
msgstr ""

#: ../../../../v1/tutorial/index.md:23
msgid "  * How to use PGroonga as index for array"
msgstr ""

#: ../../../../v1/tutorial/index.md:25
msgid "  * How to use PGroonga as index for JSON"
msgstr ""

#: ../../../../v1/tutorial/index.md:27
msgid "  * How to use PGroonga as index for auto complete"
msgstr ""

#: ../../../../v1/tutorial/index.md:29
msgid "  * How to use Groonga throw PGroonga (advanced topic)"
msgstr ""

#: ../../../../v1/tutorial/index.md:32
msgid "## Full text search"
msgstr ""

#: ../../../../v1/tutorial/index.md:34
#: ../../../../v1/tutorial/index.md:281
msgid "This section describes about the followings:"
msgstr ""

#: ../../../../v1/tutorial/index.md:36
msgid "  * How to prepare PGroonga based full text search system\n"
"  * Operators for full text search\n"
"  * Score"
msgstr ""

#: ../../../../v1/tutorial/index.md:40
msgid "### How to prepare PGroonga based full text search system"
msgstr ""

#: ../../../../v1/tutorial/index.md:42
msgid "This section describes about how to prepare PGroonga based full text search system."
msgstr ""

#: ../../../../v1/tutorial/index.md:44
msgid "Create a column that you want to enable full text search as `text` type:"
msgstr ""

#: ../../../../v1/tutorial/index.md:46
msgid "```sql\n"
"CREATE TABLE memos (\n"
"  id integer,\n"
"  content text\n"
");\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:53
msgid "`memos.content` column is a full text search target column."
msgstr ""

#: ../../../../v1/tutorial/index.md:55
msgid "Create a `pgroonga` index against the column:"
msgstr ""

#: ../../../../v1/tutorial/index.md:57
msgid "```\n"
"CREATE INDEX pgroonga_content_index ON memos USING pgroonga (content);\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:61
msgid "See [CREATE INDEX USING pgroonga](../reference/create-index-using-pgroonga.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:63
#: ../../../../v1/tutorial/index.md:164
#: ../../../../v1/tutorial/index.md:303
#: ../../../../v1/tutorial/index.md:347
#: ../../../../v1/tutorial/index.md:398
#: ../../../../v1/tutorial/index.md:441
msgid "Insert test data:"
msgstr ""

#: ../../../../v1/tutorial/index.md:65
msgid "```sql\n"
"INSERT INTO memos VALUES (1, 'PostgreSQL is a relational database management system.');\n"
"INSERT INTO memos VALUES (2, 'Groonga is a fast full text search engine that supports all languages.');\n"
"INSERT INTO memos VALUES (3, 'PGroonga is a PostgreSQL extension that uses Groonga as index.');\n"
"INSERT INTO memos VALUES (4, 'There is groonga command.');\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:72
#: ../../../../v1/tutorial/index.md:173
msgid "Disable sequential scan to ensure using `pgroonga` index:"
msgstr ""

#: ../../../../v1/tutorial/index.md:74
#: ../../../../v1/tutorial/index.md:175
#: ../../../../v1/tutorial/index.md:313
#: ../../../../v1/tutorial/index.md:357
#: ../../../../v1/tutorial/index.md:552
msgid "```sql\n"
"SET enable_seqscan = off;\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:78
msgid "NOTE: You should not disable sequential scan on production environment. This is only for test."
msgstr ""

#: ../../../../v1/tutorial/index.md:80
msgid "### Operators for full text search"
msgstr ""

#: ../../../../v1/tutorial/index.md:82
msgid "There are the following operators to perform full text search:"
msgstr ""

#: ../../../../v1/tutorial/index.md:84
msgid "  * `&@`"
msgstr ""

#: ../../../../v1/tutorial/index.md:86
msgid "  * `&@~`"
msgstr ""

#: ../../../../v1/tutorial/index.md:88
msgid "  * `LIKE`"
msgstr ""

#: ../../../../v1/tutorial/index.md:90
msgid "  * `ILIKE`"
msgstr ""

#: ../../../../v1/tutorial/index.md:92
msgid "#### `&@` operator"
msgstr ""

#: ../../../../v1/tutorial/index.md:94
msgid "You can use `&@` operator to perform full text search by one keyword:"
msgstr ""

#: ../../../../v1/tutorial/index.md:96
msgid "```sql\n"
"SELECT * FROM memos WHERE content &@ 'engine';\n"
"--  id |                                content                                 \n"
"-- ----+------------------------------------------------------------------------\n"
"--   2 | Groonga is a fast full text search engine that supports all languages.\n"
"-- (1 row)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:104
msgid "See [`&@` operator](../reference/operators/match-v2.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:106
msgid "#### `&@~` operator"
msgstr ""

#: ../../../../v1/tutorial/index.md:108
msgid "You can use `&@~` operator to perform full text search by query syntax such as `keyword1 OR keyword2`:"
msgstr ""

#: ../../../../v1/tutorial/index.md:110
msgid "```sql\n"
"SELECT * FROM memos WHERE content &@~ 'PGroonga OR PostgreSQL';\n"
"--  id |                            content                             \n"
"-- ----+----------------------------------------------------------------\n"
"--   3 | PGroonga is a PostgreSQL extension that uses Groonga as index.\n"
"--   1 | PostgreSQL is a relational database management system.\n"
"-- (2 rows)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:119
msgid "Query syntax is similar to syntax of Web search engine. For example, you can use `OR` to merge result sets of performing full text search by two or more words. In the above example, you get a merged result set. The merged result set has records that includes `PGroonga` or `PostgreSQL`."
msgstr ""

#: ../../../../v1/tutorial/index.md:121
msgid "See [Groonga document](http://groonga.org/docs/reference/grn_expr/query_syntax.html) for full query syntax."
msgstr ""

#: ../../../../v1/tutorial/index.md:123
msgid "See [`&@~` operator](../reference/operators/query-v2.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:125
msgid "#### `LIKE` operator {#like}"
msgstr ""

#: ../../../../v1/tutorial/index.md:127
msgid "PGroonga supports `LIKE` operator. You can perform fast full text search by PGroonga without changing existing SQL."
msgstr ""

#: ../../../../v1/tutorial/index.md:129
msgid "`column LIKE '%keyword%'` almost equals to `column &@ 'keyword'`:"
msgstr ""

#: ../../../../v1/tutorial/index.md:131
msgid "```sql\n"
"SELECT * FROM memos WHERE content LIKE '%engine%';\n"
"--  id |                                content                                 \n"
"-- ----+------------------------------------------------------------------------\n"
"--   2 | Groonga is a fast full text search engine that supports all languages.\n"
"-- (1 row)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:139
msgid "`LIKE` operator support is convenient because you can improve performance without changing existing applications. But `LIKE` operator is slower than `&@` because `LIKE` operator requires sequential search after index search. The process is called as \"recheck\". It's recommend that you change to `&@` or `&@~` from `LIKE` in your application for more performance."
msgstr ""

#: ../../../../v1/tutorial/index.md:141
msgid "See [`LIKE` operator](../reference/operators/like.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:143
msgid "You can also use `ILIKE` operator like `LIKE` operator."
msgstr ""

#: ../../../../v1/tutorial/index.md:145
msgid "### Score {#score}"
msgstr ""

#: ../../../../v1/tutorial/index.md:147
msgid "You can use `pgroonga.score` function to get precision as a number. If a record is more precision against searched query, the record has more higher number."
msgstr ""

#: ../../../../v1/tutorial/index.md:149
msgid "You need to add primary key column into `pgroonga` index to use `pgroonga.score` function. If you don't add primary key column into `pgroonga` index, `pgroonga.score` function always returns `0`."
msgstr ""

#: ../../../../v1/tutorial/index.md:151
msgid "Here is a sample schema that includes primary key into indexed columns:"
msgstr ""

#: ../../../../v1/tutorial/index.md:153
msgid "```sql\n"
"CREATE TABLE score_memos (\n"
"  id integer PRIMARY KEY,\n"
"  content text\n"
");"
msgstr ""

#: ../../../../v1/tutorial/index.md:159
msgid "CREATE INDEX pgroonga_score_memos_content_index\n"
"          ON score_memos\n"
"       USING pgroonga (id, content);\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:166
msgid "```sql\n"
"INSERT INTO score_memos VALUES (1, 'PostgreSQL is a relational database management system.');\n"
"INSERT INTO score_memos VALUES (2, 'Groonga is a fast full text search engine that supports all languages.');\n"
"INSERT INTO score_memos VALUES (3, 'PGroonga is a PostgreSQL extension that uses Groonga as index.');\n"
"INSERT INTO score_memos VALUES (4, 'There is groonga command.');\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:179
msgid "Perform full text search and get score."
msgstr ""

#: ../../../../v1/tutorial/index.md:181
msgid "```sql\n"
"SELECT *, pgroonga_score(tableoid, ctid)\n"
"  FROM score_memos\n"
" WHERE content &@ 'PGroonga' OR content &@ 'PostgreSQL';\n"
"--  id |                            content                             | score \n"
"-- ----+----------------------------------------------------------------+-------\n"
"--   1 | PostgreSQL is a relational database management system.         |     1\n"
"--   3 | PGroonga is a PostgreSQL extension that uses Groonga as index. |     2\n"
"-- (2 rows)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:192
msgid "You can sort matched records by precision descending by using `pgroonga_score` function in `ORDER BY` clause:"
msgstr ""

#: ../../../../v1/tutorial/index.md:194
msgid "```sql\n"
"SELECT *, pgroonga_score(tableoid, ctid)\n"
"  FROM score_memos\n"
" WHERE content &@ 'PGroonga' OR content &@ 'PostgreSQL'\n"
" ORDER BY pgroonga_score(tableoid, ctid) DESC;\n"
"--  id |                            content                             | score \n"
"-- ----+----------------------------------------------------------------+-------\n"
"--   3 | PGroonga is a PostgreSQL extension that uses Groonga as index. |     2\n"
"--   1 | PostgreSQL is a relational database management system.         |     1\n"
"-- (2 rows)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:206
msgid "See [`pgroonga.score` function](../reference/functions/pgroonga-score.html) for more details such as how to compute precision."
msgstr ""

#: ../../../../v1/tutorial/index.md:208
msgid "### Highlight {#highlight}"
msgstr ""

#: ../../../../v1/tutorial/index.md:210
#: ../../../../v1/tutorial/index.md:261
#: ../../../../v1/tutorial/index.md:267
#: ../../../../v1/tutorial/index.md:273
#: ../../../../v1/tutorial/index.md:672
msgid "TODO"
msgstr ""

#: ../../../../v1/tutorial/index.md:212
msgid "See [`pgroonga.highlight_html` function](../reference/functions/pgroonga-highlight-html.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:214
msgid "### Snippet (KWIC, keyword in context) {#snippet}"
msgstr ""

#: ../../../../v1/tutorial/index.md:216
msgid "You can use `pgroonga.snippet_html` function to get texts around keywords from search target text. It's also known as [KWIC](https://en.wikipedia.org/wiki/Key_Word_in_Context) (keyword in context). You can see it in search result on Web search engine."
msgstr ""

#: ../../../../v1/tutorial/index.md:218
msgid "Here is a sample text for description. It's a description about Groonga."
msgstr ""

#: ../../../../v1/tutorial/index.md:220
msgid "> Groonga is a fast and accurate full text search engine based on inverted index. One of the characteristics of Groonga is that a newly registered document instantly appears in search results. Also, Groonga allows updates without read locks. These characteristics result in superior performance on real-time applications."
msgstr ""

#: ../../../../v1/tutorial/index.md:223
msgid "There are some `fast` keywords. `pgroonga.snippet_html` extracts texts around `fast`. Keywords in extracted texts are surround with `<span class=\"keyword\">` and `</span>`."
msgstr ""

#: ../../../../v1/tutorial/index.md:225
msgid "`html` in `pgroonga.snippet_html` means that this function returns result for HTML output."
msgstr ""

#: ../../../../v1/tutorial/index.md:227
msgid "Here is the result of `pgroonga.snippet_html` against the above text:"
msgstr ""

#: ../../../../v1/tutorial/index.md:229
msgid "> Groonga is a <span class=\"keyword\">fast</span> and accurate full text search engine based on inverted index. One of the characteristics of Groonga is that a newly registered document instantly appears in search results. Also, Gro"
msgstr ""

#: ../../../../v1/tutorial/index.md:231
msgid "This function can be used for all texts. It's not only for search result by PGroonga."
msgstr ""

#: ../../../../v1/tutorial/index.md:233
msgid "Here is a sample SQL that describes about it. You can use the function in the following `SELECT` that doesn't have `FROM`. Note that [`unnest`]({{ site.postgresql_doc_base_url.en }}/functions-array.html) is a PostgreSQL function that converts an array to rows."
msgstr ""

#: ../../../../v1/tutorial/index.md:235
msgid "```sql\n"
"SELECT unnest(pgroonga.snippet_html(\n"
"  'Groonga is a fast and accurate full text search engine based on ' ||\n"
"  'inverted index. One of the characteristics of Groonga is that a ' ||\n"
"  'newly registered document instantly appears in search results. ' ||\n"
"  'Also, Groonga allows updates without read locks. These characteristics ' ||\n"
"  'result in superior performance on real-time applications.' ||\n"
"  '\\n' ||\n"
"  '\\n' ||\n"
"  'Groonga is also a column-oriented database management system (DBMS). ' ||\n"
"  'Compared with well-known row-oriented systems, such as MySQL and ' ||\n"
"  'PostgreSQL, column-oriented systems are more suited for aggregate ' ||\n"
"  'queries. Due to this advantage, Groonga can cover weakness of ' ||\n"
"  'row-oriented systems.',\n"
"  ARRAY['fast', 'PostgreSQL']));\n"
"                                                                                 --                                unnest                                                                                                                 \n"
"-- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
"--  Groonga is a <span class=\"keyword\">fast</span> and accurate full text search engine based on inverted index. One of the characteristics of Groonga is that a newly registered document instantly appears in search results. Also, Gro\n"
"--  ase management system (DBMS). Compared with well-known row-oriented systems, such as MySQL and <span class=\"keyword\">PostgreSQL</span>, column-oriented systems are more suited for aggregate queries. Due to this advantage, Groonga\n"
"-- (2 rows)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:257
msgid "See [`pgroonga.snippet_html` function](../reference/functions/pgroonga-snippet-html.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:259
msgid "### Synonym {#synonym}"
msgstr ""

#: ../../../../v1/tutorial/index.md:263
msgid "See [`pgroonga.query_expand` function](../reference/functions/pgroonga-query-expand.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:265
msgid "## Regular expression {#regular-expression}"
msgstr ""

#: ../../../../v1/tutorial/index.md:269
msgid "See [`&~` operator](../reference/operations/regular-expression-v2.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:271
msgid "## Similar search {#similar-search}"
msgstr ""

#: ../../../../v1/tutorial/index.md:275
msgid "See [`&@*` operator](../reference/operations/similar-search-v2.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:277
msgid "## Equality condition and comparison conditions {#equal}"
msgstr ""

#: ../../../../v1/tutorial/index.md:279
msgid "You can use PGroonga for equality condition and comparison conditions. There are some differences between how to create index for string types and other types. There is no difference between how to write condition for string types and other types."
msgstr ""

#: ../../../../v1/tutorial/index.md:283
msgid "  * How to use PGroonga for not string types"
msgstr ""

#: ../../../../v1/tutorial/index.md:285
msgid "  * How to use PGroonga for string types"
msgstr ""

#: ../../../../v1/tutorial/index.md:287
msgid "### How to use PGroonga for not string types {#equal-not-string}"
msgstr ""

#: ../../../../v1/tutorial/index.md:289
msgid "You can use PGroonga for not string types such as number. You can use equality condition and comparison conditions against these types."
msgstr ""

#: ../../../../v1/tutorial/index.md:291
#: ../../../../v1/tutorial/index.md:334
#: ../../../../v1/tutorial/index.md:387
#: ../../../../v1/tutorial/index.md:429
msgid "Create index with `USING pgroonga`:"
msgstr ""

#: ../../../../v1/tutorial/index.md:293
msgid "```sql\n"
"CREATE TABLE ids (\n"
"  id integer\n"
");"
msgstr ""

#: ../../../../v1/tutorial/index.md:298
msgid "CREATE INDEX pgroonga_id_index ON ids USING pgroonga (id);\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:301
#: ../../../../v1/tutorial/index.md:345
msgid "The special SQL to use PGroonga is only `CREATE INDEX`. You can use SQL for B-tree index to use PGroonga."
msgstr ""

#: ../../../../v1/tutorial/index.md:305
msgid "```sql\n"
"INSERT INTO ids VALUES (1);\n"
"INSERT INTO ids VALUES (2);\n"
"INSERT INTO ids VALUES (3);\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:311
#: ../../../../v1/tutorial/index.md:355
#: ../../../../v1/tutorial/index.md:550
msgid "Disable sequential scan:"
msgstr ""

#: ../../../../v1/tutorial/index.md:317
#: ../../../../v1/tutorial/index.md:361
msgid "Search:"
msgstr ""

#: ../../../../v1/tutorial/index.md:319
msgid "```sql\n"
"SELECT * FROM ids WHERE id <= 2;\n"
"--  id\n"
"-- ----\n"
"--   1\n"
"--   2\n"
"-- (2 rows)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:328
msgid "### How to use PGroonga for string types {#equal-string}"
msgstr ""

#: ../../../../v1/tutorial/index.md:330
msgid "You need to use `varchar` type to use PGroonga as an index for equality condition and comparison conditions against string."
msgstr ""

#: ../../../../v1/tutorial/index.md:332
msgid "You must to specify the maximum number of characters of `varchar` to satisfy that the maximum byte size of the column is equal to 4096 byte or smaller. Relation between the maximum number of characters and the maximum byte size is related to encoding. For example, you must to specify 1023 or smaller as the maximum number of characters for UTF-8 encoding. Because UTF-8 encoding `varchar` keeps 4 byte for one character and PostgreSQL uses 4 byte for metadata."
msgstr ""

#: ../../../../v1/tutorial/index.md:336
msgid "```sql\n"
"CREATE TABLE tags (\n"
"  id integer,\n"
"  tag varchar(1023)\n"
");"
msgstr ""

#: ../../../../v1/tutorial/index.md:342
msgid "CREATE INDEX pgroonga_tag_index ON tags USING pgroonga (tag);\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:349
msgid "```sql\n"
"INSERT INTO tags VALUES (1, 'PostgreSQL');\n"
"INSERT INTO tags VALUES (2, 'Groonga');\n"
"INSERT INTO tags VALUES (3, 'Groonga');\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:363
msgid "```sql\n"
"SELECT * FROM tags WHERE tag = 'Groonga';\n"
"--  id |   tag\n"
"-- ----+---------\n"
"--   2 | Groonga\n"
"--   3 | Groonga\n"
"-- (2 rows)\n"
"--\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:373
msgid "## How to use PGroonga for array"
msgstr ""

#: ../../../../v1/tutorial/index.md:375
msgid "You can use PGroonga as an index for array of `text` type or array of `varchar`."
msgstr ""

#: ../../../../v1/tutorial/index.md:377
msgid "You can perform full text search against array of `text` type. If one or more elements in an array are matched, the record is matched."
msgstr ""

#: ../../../../v1/tutorial/index.md:379
msgid "You can perform equality condition against array of `varchar` type. If one or more elements in an array are matched, the record is matched. It's useful for tag search."
msgstr ""

#: ../../../../v1/tutorial/index.md:381
msgid "  * How to use PGroonga for `text` type of array"
msgstr ""

#: ../../../../v1/tutorial/index.md:383
msgid "  * How to use PGroonga for `varchar` type of array"
msgstr ""

#: ../../../../v1/tutorial/index.md:385
msgid "### How to use PGroonga for `text` type of array"
msgstr ""

#: ../../../../v1/tutorial/index.md:389
msgid "```sql\n"
"CREATE TABLE docs (\n"
"  id integer,\n"
"  sections text[]\n"
");"
msgstr ""

#: ../../../../v1/tutorial/index.md:395
msgid "CREATE INDEX pgroonga_sections_index ON docs USING pgroonga (sections);\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:400
msgid "```sql\n"
"INSERT INTO docs\n"
"     VALUES (1,\n"
"             ARRAY['PostgreSQL is a relational database management system.',\n"
"                   'PostgreSQL supports full text search partially.']);\n"
"INSERT INTO docs\n"
"     VALUES (2,\n"
"             ARRAY['Groonga is a fast full text search engine that supports all languages.',\n"
"                   'Groonga can be embedded into other systems.']);\n"
"INSERT INTO docs\n"
"     VALUES (3,\n"
"             ARRAY['PGroonga is a PostgreSQL extension that uses Groonga as index.',\n"
"                   'It adds powerful full text search feature to PostgreSQL.']);\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:415
msgid "You can use `&@` operator or `&@~` operator for full text search. The full text search doesn't care about the position of element."
msgstr ""

#: ../../../../v1/tutorial/index.md:417
msgid "```sql\n"
"SELECT * FROM docs WHERE sections &@ 'text';\n"
"--  id |                                                           sections                                                            \n"
"-- ----+-------------------------------------------------------------------------------------------------------------------------------\n"
"--   1 | {\"PostgreSQL is a relational database management system.\",\"PostgreSQL supports full text search partially.\"}\n"
"--   2 | {\"Groonga is a fast full text search engine that supports all languages.\",\"Groonga can be embedded into other systems.\"}\n"
"--   3 | {\"PGroonga is a PostgreSQL extension that uses Groonga as index.\",\"It adds powerful full text search feature to PostgreSQL.\"}\n"
"-- (3 rows)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:427
msgid "### How to use PGroonga for `varchar` type of array"
msgstr ""

#: ../../../../v1/tutorial/index.md:431
msgid "```sql\n"
"CREATE TABLE products (\n"
"  id integer,\n"
"  name text,\n"
"  tags varchar(1023)[]\n"
");"
msgstr ""

#: ../../../../v1/tutorial/index.md:438
msgid "CREATE INDEX pgroonga_tags_index ON products USING pgroonga (tags);\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:443
msgid "```sql\n"
"INSERT INTO products\n"
"     VALUES (1,\n"
"             'PostgreSQL',\n"
"             ARRAY['PostgreSQL', 'RDBMS']);\n"
"INSERT INTO products\n"
"     VALUES (2,\n"
"             'Groonga',\n"
"             ARRAY['Groonga', 'full-text search']);\n"
"INSERT INTO products\n"
"     VALUES (3,\n"
"             'PGroonga',\n"
"             ARRAY['PostgreSQL', 'Groonga', 'full-text search']);\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:458
msgid "You can use `&@` operator to find records that have one or more matched elements. If element's value equals to queried value, the element is treated as matched."
msgstr ""

#: ../../../../v1/tutorial/index.md:460
msgid "```sql\n"
"SELECT * FROM products WHERE tags &@ 'PostgreSQL';\n"
"--  id |    name    |                  tags                   \n"
"-- ----+------------+-----------------------------------------\n"
"--   1 | PostgreSQL | {PostgreSQL,RDBMS}\n"
"--   3 | PGroonga   | {PostgreSQL,Groonga,\"full-text search\"}\n"
"-- (2 rows)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:469
msgid "## How to use PGroonga for JSON {#json}"
msgstr ""

#: ../../../../v1/tutorial/index.md:471
msgid "PGroonga also supports `jsonb` type. You can search JSON data by one or more keys and/or one or more values with PGroonga."
msgstr ""

#: ../../../../v1/tutorial/index.md:473
msgid "You can also search JSON data by full text search against all text values in JSON. It's an unique feature of PGroonga. Built-in PostgreSQL 9 features and [JsQuery](https://github.com/postgrespro/jsquery) don't support it. PostgreSQL 10 supports it as a built-in feature."
msgstr ""

#: ../../../../v1/tutorial/index.md:475
msgid "Think about the following JSON:"
msgstr ""

#: ../../../../v1/tutorial/index.md:477
msgid "```json\n"
"{\n"
"  \"message\": \"Server is started.\",\n"
"  \"host\": \"www.example.com\",\n"
"  \"tags\": [\n"
"    \"web\",\n"
"  ]\n"
"}\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:487
msgid "You can find the JSON by full text search with `search`, `example` or `web` because all text values are full text search target."
msgstr ""

#: ../../../../v1/tutorial/index.md:489
msgid "PGroonga provides the following two operators for searching against `jsonb`:"
msgstr ""

#: ../../../../v1/tutorial/index.md:491
msgid "  * `@>` operator"
msgstr ""

#: ../../../../v1/tutorial/index.md:493
msgid "  * `&@` operator"
msgstr ""

#: ../../../../v1/tutorial/index.md:495
msgid "  * `&@~` operator"
msgstr ""

#: ../../../../v1/tutorial/index.md:497
msgid "  * `` &` `` operator"
msgstr ""

#: ../../../../v1/tutorial/index.md:499
msgid "[`@>` operator is a built-in PostgreSQL operator]({{ site.postgresql_doc_base_url.en }}/functions-json.html#FUNCTIONS-JSONB-OP-TABLE). `@>` returns true when the right hand side `jsonb` is a subset of left hand side `jsonb`."
msgstr ""

#: ../../../../v1/tutorial/index.md:501
msgid "You can execute `@>` faster by PGroonga."
msgstr ""

#: ../../../../v1/tutorial/index.md:503
#: ../../../../v1/tutorial/index.md:590
msgid "`&@` operator is a PGroonga original operator. You can perform full text search against all texts in JSON by one keyword."
msgstr ""

#: ../../../../v1/tutorial/index.md:505
#: ../../../../v1/tutorial/index.md:613
msgid "`&@~` operator is a PGroonga original operator. You can perform full text search against all texts in JSON by query syntax."
msgstr ""

#: ../../../../v1/tutorial/index.md:507
#: ../../../../v1/tutorial/index.md:644
msgid "`` &` `` operator is a PGroonga original operator. You can write complex condition that can't be written by `@>` operator such as range search."
msgstr ""

#: ../../../../v1/tutorial/index.md:509
msgid "### Sample schema and data"
msgstr ""

#: ../../../../v1/tutorial/index.md:511
msgid "Here are sample schema and data for examples:"
msgstr ""

#: ../../../../v1/tutorial/index.md:513
msgid "```sql\n"
"CREATE TABLE logs (\n"
"  record jsonb\n"
");"
msgstr ""

#: ../../../../v1/tutorial/index.md:518
msgid "CREATE INDEX pgroonga_logs_index ON logs USING pgroonga (record);"
msgstr ""

#: ../../../../v1/tutorial/index.md:520
msgid "INSERT INTO logs\n"
"     VALUES ('{\n"
"                \"message\": \"Server is started.\",\n"
"                \"host\":    \"www.example.com\",\n"
"                \"tags\": [\n"
"                  \"web\",\n"
"                  \"example.com\"\n"
"                ]\n"
"              }');\n"
"INSERT INTO logs\n"
"     VALUES ('{\n"
"                \"message\": \"GET /\",\n"
"                \"host\":    \"www.example.com\",\n"
"                \"code\":    200,\n"
"                \"tags\": [\n"
"                  \"web\",\n"
"                  \"example.com\"\n"
"                ]\n"
"              }');\n"
"INSERT INTO logs\n"
"     VALUES ('{\n"
"                \"message\": \"Send to <info@example.com>.\",\n"
"                \"host\":    \"mail.example.net\",\n"
"                \"tags\": [\n"
"                  \"mail\",\n"
"                  \"example.net\"\n"
"                ]\n"
"              }');\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:556
msgid "### `@>` operator {#jsonb-contain}"
msgstr ""

#: ../../../../v1/tutorial/index.md:558
msgid "`@>` operator specify search condition by `jsonb` value. If condition `jsonb` value is a subset of the search target `jsonb` value, `@>` operator returns `true`."
msgstr ""

#: ../../../../v1/tutorial/index.md:560
msgid "Here is an example:"
msgstr ""

#: ../../../../v1/tutorial/index.md:562
msgid "```sql\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record @> '{\"host\": \"www.example.com\"}'::jsonb;\n"
"--             jsonb_pretty             \n"
"-- -------------------------------------\n"
"--  {                                  +\n"
"--      \"host\": \"www.example.com\",     +\n"
"--      \"tags\": [                      +\n"
"--          \"web\",                     +\n"
"--          \"example.com\"              +\n"
"--      ],                             +\n"
"--      \"message\": \"Server is started.\"+\n"
"--  }\n"
"--  {                                  +\n"
"--      \"code\": 200,                   +\n"
"--      \"host\": \"www.example.com\",     +\n"
"--      \"tags\": [                      +\n"
"--          \"web\",                     +\n"
"--          \"example.com\"              +\n"
"--      ],                             +\n"
"--      \"message\": \"GET /\"             +\n"
"--  }\n"
"-- (2 rows)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:586
msgid "See [`@>` operator](../reference/operators/jsonb-contain.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:588
msgid "### `&@` operator"
msgstr ""

#: ../../../../v1/tutorial/index.md:592
msgid "Here is an example to search \"server\" in JSON:"
msgstr ""

#: ../../../../v1/tutorial/index.md:594
msgid "```sql\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record &@ 'server';\n"
"--             jsonb_pretty             \n"
"-- -------------------------------------\n"
"--  {                                  +\n"
"--      \"host\": \"www.example.com\",     +\n"
"--      \"tags\": [                      +\n"
"--          \"web\",                     +\n"
"--          \"example.com\"              +\n"
"--      ],                             +\n"
"--      \"message\": \"Server is started.\"+\n"
"--  }\n"
"-- (1 row)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:609
msgid "See [`&@` operator for `jsonb`](../reference/operators/match-jsonb-v2.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:611
msgid "### `&@~` operator"
msgstr ""

#: ../../../../v1/tutorial/index.md:615
msgid "Here is an example to search \"server\" or \"send\" in JSON:"
msgstr ""

#: ../../../../v1/tutorial/index.md:617
msgid "```sql\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record &@~ 'server OR send';\n"
"--                  jsonb_pretty                 \n"
"-- ----------------------------------------------\n"
"--  {                                           +\n"
"--      \"host\": \"www.example.com\",              +\n"
"--      \"tags\": [                               +\n"
"--          \"web\",                              +\n"
"--          \"example.com\"                       +\n"
"--      ],                                      +\n"
"--      \"message\": \"Server is started.\"         +\n"
"--  }\n"
"--  {                                           +\n"
"--      \"host\": \"mail.example.net\",             +\n"
"--      \"tags\": [                               +\n"
"--          \"mail\",                             +\n"
"--          \"example.net\"                       +\n"
"--      ],                                      +\n"
"--      \"message\": \"Send to <info@example.com>.\"+\n"
"--  }\n"
"-- (2 rows)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:640
msgid "See [`&@~` operator for `jsonb`](../reference/operators/query-jsonb-v2.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:642
msgid "### `` &` `` operator"
msgstr ""

#: ../../../../v1/tutorial/index.md:646
msgid "Here is an example for range search. The `SELECT` returns records that is matched with the following conditions:"
msgstr ""

#: ../../../../v1/tutorial/index.md:648
msgid "  * `code` key exists at the top-level object"
msgstr ""

#: ../../../../v1/tutorial/index.md:650
msgid "  * Value of the `code` is greater than or equal to `200` and less than `300`"
msgstr ""

#: ../../../../v1/tutorial/index.md:652
msgid "```sql\n"
"SELECT jsonb_pretty(record) FROM logs WHERE record &` 'paths @ \".code\" && number >= 200 && number < 300';\n"
"--           jsonb_pretty          \n"
"-- --------------------------------\n"
"--  {                             +\n"
"--      \"code\": 200,              +\n"
"--      \"host\": \"www.example.com\",+\n"
"--      \"tags\": [                 +\n"
"--          \"web\",                +\n"
"--          \"example.com\"         +\n"
"--      ],                        +\n"
"--      \"message\": \"GET /\"        +\n"
"--  }\n"
"-- (1 row)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:668
msgid "See [`` &` `` operator for `jsonb`](../reference/operators/script-jsonb-v2.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:670
msgid "## Auto complete"
msgstr ""

#: ../../../../v1/tutorial/index.md:674
msgid "See [how to implement auto complete feature][how-to-auto-complete] for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:676
msgid "## How to use Groonga throw PGroonga {#groonga}"
msgstr ""

#: ../../../../v1/tutorial/index.md:678
msgid "This is an advanced topic."
msgstr ""

#: ../../../../v1/tutorial/index.md:680
msgid "In most cases, Groonga is faster than PostgreSQL."
msgstr ""

#: ../../../../v1/tutorial/index.md:682
msgid "For example, [drilldown feature](http://groonga.org/docs/reference/commands/select.html#drilldown) in Groonga is faster than one `SELECT` and multiple `GROUP BY`s (or one `GROUP BY GROUPING SET`) by PostgreSQL. Because all needed results can be done by one query in Groonga."
msgstr ""

#: ../../../../v1/tutorial/index.md:684
msgid "In another instance, Groonga can perform query that doesn't use all columns in record faster than PostgreSQL. Because Groonga has column oriented data store. Column oriented data store (Groonga) is faster than row oriented data store (PostgreSQL) for accessing some columns. Row oriented data store needs to read all columns in record to access only partial columns. Column oriented data store just need to read only target columns in record."
msgstr ""

#: ../../../../v1/tutorial/index.md:686
msgid "You can't use SQL to use Groonga directory. It's not PostgrSQL user friendly. But PGroonga provides a feature to use Groonga directly throw SQL."
msgstr ""

#: ../../../../v1/tutorial/index.md:688
msgid "### `pgroonga.command` function"
msgstr ""

#: ../../../../v1/tutorial/index.md:690
msgid "You can execute [Groonga commands](http://groonga.org/docs/reference/command.html) and get the result of the execution as string by `pgroonga.command` function."
msgstr ""

#: ../../../../v1/tutorial/index.md:692
msgid "Here is an example that executes [`status` command](http://groonga.org/docs/reference/commands/status.html):"
msgstr ""

#: ../../../../v1/tutorial/index.md:694
msgid "```sql\n"
"SELECT pgroonga.command('status');\n"
"--                                   command                                                                                                                  \n"
"-- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
"--  [[0,1423911561.69344,6.15119934082031e-05],{\"alloc_count\":164,\"starttime\":1423911561,\"uptime\":0,\"version\":\"5.0.0-6-g17847c9\",\"n_queries\":0,\"cache_hit_rate\":0.0,\"command_version\":1,\"default_command_version\":1,\"max_command_version\":2}]\n"
"-- (1 row)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:702
msgid "Result from Groonga is JSON. You can use JSON related functions provided by PostgreSQL to access result from Groonga."
msgstr ""

#: ../../../../v1/tutorial/index.md:704
msgid "Here is an example to map one key value pair in the result of `status` command to one row:"
msgstr ""

#: ../../../../v1/tutorial/index.md:706
msgid "```sql\n"
"SELECT * FROM json_each(pgroonga.command('status')::json->1);\n"
"--            key           |       value        \n"
"-- -------------------------+--------------------\n"
"--  alloc_count             | 168\n"
"--  starttime               | 1423911561\n"
"--  uptime                  | 221\n"
"--  version                 | \"5.0.0-6-g17847c9\"\n"
"--  n_queries               | 0\n"
"--  cache_hit_rate          | 0.0\n"
"--  command_version         | 1\n"
"--  default_command_version | 1\n"
"--  max_command_version     | 2\n"
"-- (9 rows)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:722
msgid "See [`pgroonga.command` function](../reference/functions/pgroonga-command.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:724
msgid "### `pgroonga.table_name` function {#pgroonga-table-name}"
msgstr ""

#: ../../../../v1/tutorial/index.md:726
msgid "PGroonga stores values of index target columns. You can use these values to search and output by [`select` Groonga command](http://groonga.org/docs/reference/commands/select.html)."
msgstr ""

#: ../../../../v1/tutorial/index.md:728
msgid "`select` Groonga command needs table name. You can use `pgroonga.table_name` function to convert index name in PostgreSQL to table name in Groonga."
msgstr ""

#: ../../../../v1/tutorial/index.md:730
msgid "Here is an example to use `select` command with `pgroonga.table_name` function:"
msgstr ""

#: ../../../../v1/tutorial/index.md:732
msgid "```sql\n"
"SELECT *\n"
"  FROM json_array_elements(pgroonga.command('select ' || pgroonga.table_name('pgroonga_content_index'))::json->1->0);\n"
"--                                      value                                      \n"
"-- --------------------------------------------------------------------------------\n"
"--  [4]\n"
"--  [[\"_id\",\"UInt32\"],[\"content\",\"LongText\"],[\"ctid\",\"UInt64\"]]\n"
"--  [1,\"PostgreSQL is a relational database management system.\",1]\n"
"--  [2,\"Groonga is a fast full text search engine that supports all languages.\",2]\n"
"--  [3,\"PGroonga is a PostgreSQL extension that uses Groonga as index.\",3]\n"
"--  [4,\"There is groonga command.\",4]\n"
"-- (6 rows)\n"
"```"
msgstr ""

#: ../../../../v1/tutorial/index.md:746
msgid "See [`pgroonga.table_name` function](../reference/functions/pgroonga-table-name.html) for more details."
msgstr ""

#: ../../../../v1/tutorial/index.md:748
msgid "## Next step"
msgstr ""

#: ../../../../v1/tutorial/index.md:750
msgid "Now, you knew all PGroonga features! If you want to understand each feature, see [reference manual][reference] for each feature."
msgstr ""

#: ../../../../v1/tutorial/index.md:752
msgid "[How to][how-to] may help you to use PGroonga for specific situation."
msgstr ""

#: ../../../../v1/tutorial/index.md:754
msgid "If you get a problem or want to share your useful information, please contact [PGroonga community][community]."
msgstr ""

#: ../../../../v1/tutorial/index.md:756
msgid "[install]:../../install/"
msgstr ""

#: ../../../../v1/tutorial/index.md:758
msgid "[reference]:../reference/"
msgstr ""

#: ../../../../v1/tutorial/index.md:760
msgid "[how-to]:../how-to/"
msgstr ""

#: ../../../../v1/tutorial/index.md:762
msgid "[how-to-auto-complete]:../how-to/auto-complete.html"
msgstr ""

#: ../../../../v1/tutorial/index.md:764
msgid "[community]:../../community/"
msgstr ""

